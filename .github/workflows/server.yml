name: Build and Push Course Site Backend Docker Image

# Workflow triggers
# - Run on any push to the main branch
# - Run on any Git tag that matches v* (e.g., v1.2.3)
# - Run only when changes touch the backend folder
on:
  push:
    branches:
      - main  # or any branch you prefer
    tags:
      - 'v*'
    paths:
      - 'course-site-with-nodejs-backend-db/server-nodejs/**'

jobs:
  build-and-push-course-site-backend:
    # Use an ARM64 runner to build a linux/arm64 image natively (no emulation)
    runs-on: ubuntu-24.04-arm

    permissions:
      contents: read
      packages: write

    # Default working directory for subsequent run steps
    defaults:
      run:
        working-directory: course-site-with-nodejs-backend-db/server-nodejs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: course-site-with-nodejs-backend-db/server-nodejs/package-lock.json

      - name: Install dependencies (npm ci)
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Run lint if available
        shell: bash
        run: |
          node -e "const p=require('./package.json');process.exit(p.scripts&&p.scripts.lint?0:1)" \
          && npm run lint --if-present \
          || echo "No lint script defined; skipping"

      - name: Run tests if available (and not placeholder)
        shell: bash
        run: |
          node -e "const p=require('./package.json');const s=p.scripts&&p.scripts.test||'';process.exit(s && !s.includes('no test specified')?0:1)" \
          && npm test -- --ci --watchAll=false \
          || echo "No meaningful test script found; skipping"

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx (enable cache backend)
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Compute lowercase owner
        id: owner
        shell: bash
        run: |
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner_lower=$OWNER_LOWER" >> "$GITHUB_OUTPUT"

      - name: Extract Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ steps.owner.outputs.owner_lower }}/course-site-backend/server-nodejs
          tags: |
            # Tag rules generated by docker/metadata-action.
            # Multiple rules can apply at once; all resulting tags will be pushed for the same image digest.
            # Examples:
            #  - push to main -> latest, <short-sha>
            #  - push to feature/my-branch -> feature-my-branch, <short-sha>
            #  - push tag v1.2.3 -> v1.2.3, <short-sha>
            # latest on default branch (e.g., main)
            type=raw,value=latest,enable={{is_default_branch}}
            # branch name for non-default branches
            type=ref,event=branch
            # semantic version when pushing a git tag (e.g., v1.2.3)
            type=ref,event=tag
            # short SHA for traceability
            type=sha,format=short

      - name: Build and push (ARM64)
        uses: docker/build-push-action@v5
        with:
          context: ./course-site-with-nodejs-backend-db/server-nodejs
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # SBOM generation on tag releases only (no GitHub Release creation)
      - name: Install Syft (for SBOM)
        if: startsWith(github.ref, 'refs/tags/')
        id: syft
        uses: anchore/sbom-action/download-syft@v0.17.9

      - name: Generate SBOM (CycloneDX) for released image
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          IMAGE="ghcr.io/${{ steps.owner.outputs.owner_lower }}/course-site-backend/server-nodejs:${{ github.ref_name }}"
          "${{ steps.syft.outputs.syft-path }}" scan "$IMAGE" -o cyclonedx-json=sbom.cdx.json

      - name: Upload SBOM as artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.ref_name }}
          path: sbom.cdx.json